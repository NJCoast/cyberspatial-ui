version: '3'

volumes:
  geoserver-data-dir:
  dbdata:
  dbbackups:

services:
  db:
    image: geonode/postgis:9.6
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - ./scripts/docker/docker-envs/production/db.env

  elasticsearch:
    image: elasticsearch:5-alpine
    restart: unless-stopped
    container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: elasticsearch
        org.geonode.instance.name: geonode

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode

  # celery:
  #   image: geonode/geonode:2.6.x
  #   restart: unless-stopped
  #   container_name: celery4${COMPOSE_PROJECT_NAME}
  #   labels:
  #       org.geonode.component: celery
  #       org.geonode.instance.name: geonode
  #   depends_on:
  #     - db
  #     - elasticsearch
  #     - rabbitmq
  #   command: celery worker --app=geonode.celery_app:app -B -l INFO
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   env_file:
  #     - ./scripts/docker/docker-envs/production/celery.env

  redis:
    image: redis:alpine
    container_name: redis4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    command: redis-server --requirepass password

  data-dir-conf:
    image: geonode/geoserver_data:2.10.x
    # restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

  geoserver:
    image: geonode/geoserver:2.10.x
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - geoserver-data-dir:/geoserver_data/data
    env_file:
      - ./scripts/docker/docker-envs/production/geoserver.env

  django:
    restart: unless-stopped
    build: 
      context: .
    container_name: django4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - redis
    ports:
      - "127.0.0.1:8000:8000"
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./njcoast:/app/njcoast:ro
    env_file:
      - ./scripts/docker/docker-envs/production/django.env

